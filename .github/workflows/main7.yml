name: HassOS-AutoBuild2-n2

on:
#  release:
#    types: [published]
  #push:
  #  branches:
  #    - main
  #  paths:
  #    - 'start'
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'

env:
  RUN_VALIDATION: true

jobs:
  build:
    runs-on: ubuntu-latest
    #runs-on: ubuntu-16.04
    name: Build ${{matrix.target}}
    strategy:
      fail-fast: false
      matrix:
        target: [odroid_n2]
    outputs:
      version: ${{ steps.version_check.outputs.version }}
      version_dev: ${{ steps.version_check.outputs.version_dev }}
    steps:
    - name: detemine ref
      id: detemine_ref
      run: |
          getver=$(wget -qO- -t1 -T2 "https://api.github.com/repos/home-assistant/operating-system/releases/latest" | grep "tag_name" | head -n 1 | awk -F ":" '{print $2}' | sed 's/\"//g;s/,//g;s/ //g' )
          tag_major=$(echo "${getver}" | cut -d '.' -f 1)
          tag_build=$(echo "${getver}" | cut -d '.' -f 2)
          tag_dev=$(echo "${getver}" | cut -d '.' -f 3)
          tag_rel="rel-"${tag_major}
          echo "tag_major=$tag_major" >> $GITHUB_ENV
          echo "tag_build=$tag_build" >> $GITHUB_ENV
          echo "tag_dev=$tag_dev" >> $GITHUB_ENV
          echo "tag_rel=$tag_rel" >> $GITHUB_ENV
          echo ${tag_major}
          echo ${tag_build}
          echo ${tag_dev}
          echo ${tag_rel}
          if [ "" != "$(echo "${{github.event.inputs.ssh}}" | grep fal)" ]; then
            echo "fal"
          fi
          echo ${nproc}
          echo $(nproc)
    - name: Initialization environment
      run: |
        #sudo echo "nameserver 1.1.1.1" >> /etc/hosts
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "Asia/Shanghai"
        sudo rm -rf "/usr/local/share/boost"
        sudo rm -rf "$AGENT_TOOLSDIRECTORY"
        sudo rm -rf /usr/share/
    - uses: actions/checkout@v2
      with:
        repository: 'home-assistant/operating-system'
        ref: ${{env.tag_rel}}
    - name: Validate version
      id: version_check
      run: |
          major=$(cat ${GITHUB_WORKSPACE}/buildroot-external/meta | grep VERSION_MAJOR | cut -d'=' -f2)
          build=$(cat ${GITHUB_WORKSPACE}/buildroot-external/meta | grep VERSION_BUILD | cut -d'=' -f2)
          tag_major=${{env.tag_major}}
          tag_build=${{env.tag_build}}
          tag_dev=${{env.tag_dev}}
          if [ "${major}.${build}" != "${tag_major}.${tag_build}" ]; then
            echo "Version number in Buildroot metadata is does not match tag (${major}.${build} vs ${{ github.event.release.tag_name }})."
            exit 1
          fi
          if [ "" != "${tag_dev}" ]; then
            echo "Note: Release build with custom dev part: ${tag_dev}."
            echo "::set-output name=version::${major}.${build}.${tag_dev}"
          else
            echo "::set-output name=version::${major}.${build}"
          fi
          echo "::set-output name=version_dev::${tag_dev}"
          echo "version="${major}"+"${build}"+"${tag_dev}
          ls -l
          cd ..
          ls -l
          echo ${GITHUB_WORKSPACE}
          cd ${GITHUB_WORKSPACE}
          ls -l
    - name: Change Settings.
      run: |
        cd ${GITHUB_WORKSPACE}
        sed -i 's/lists\/\*/lists\/*\ \&\& apt-get clean/g' Dockerfile
        sed -i 's/lists\/\*/lists\/*\ \&\& apt-get clean/g' buildroot-external/package/hassio/builder/Dockerfile
        sed -i 's/-e\ BUILDER_UID/-e TZ=Asia\/Shanghai\ -e BUILDER_UID/g' buildroot-external/package/hassio/hassio.mk 
        sed -i 's/-e\ BUILDER_UID/-e TZ=Asia\/Shanghai\ -e BUILDER_UID/g' scripts/enter.sh
        #sed -i '/set/a\set\ FORCE_UNSAFE_CONFIGURE=1' scripts/entry.sh
        sed -i 's/-e\ SUPERVISOR_NAME=hassio_supervisor/-e TZ=Asia\/Shanghai\ -e SUPERVISOR_NAME=hassio_supervisor/g' buildroot-external/rootfs-overlay/usr/sbin/hassos-supervisor
        sed -i 's/${TARGET_DIR}\/etc\/rauc\/keyring.pem/\/build\/ca.pem/g' buildroot-external/scripts/ota.sh
        #sed -i 's/\:\/cache/:\/cache\ -v\ \/etc\/resolv.conf:\/etc\/resolv.conf/g' scripts/enter.sh
        #sed -i '/vhdx/d' buildroot-external/scripts/hdd-image.sh
        #sed -i '/vdi/d' buildroot-external/scripts/hdd-image.sh
        #sed -i '/qcow2/d' buildroot-external/scripts/hdd-image.sh
        #sed -i '/vhdx/d' buildroot-external/board/intel/ova/hassos-hook.sh
        #sed -i '/vdi/d' buildroot-external/board/intel/ova/hassos-hook.sh
        #sed -i '/qcow2/d' buildroot-external/board/intel/ova/hassos-hook.sh
        #rm -rf buildroot-external/rootfs-overlay/etc/docker/.empty        
        #curl -L https://sumju.net/daemon.json -o buildroot-external/rootfs-overlay/etc/docker/daemon.json
        #sed -i 's/homeassistant/itcommander/g' buildroot-external/configs/${{matrix.target}}_defconfig
        #sed -i 's/Welcome to Home Assistant/Welcome to Home Assistant (IT Commander YouTuBe Channle)/g' buildroot-external/configs/${{matrix.target}}_defconfig
        echo "BR2_TARGET_GENERIC_REMOUNT_ROOTFS_RW=y" >> buildroot-external/configs/${{matrix.target}}_defconfig
        echo "BR2_TARGET_GENERIC_ROOT_PASSWD=\"\"" >> buildroot-external/configs/${{matrix.target}}_defconfig
        echo "BR2_ROOTFS_SKELETON_DEFAULT=y" >> buildroot-external/configs/${{matrix.target}}_defconfig
        echo "BR2_TARGET_ENABLE_ROOT_LOGIN=y" >> buildroot-external/configs/${{matrix.target}}_defconfig
        echo "BR2_HOST_LZO=n" >> buildroot-external/configs/${{matrix.target}}_defconfig
        echo "BR2_PACKAGE_VIM=y" >> buildroot-external/configs/${{matrix.target}}_defconfig
        echo "BR2_PACKAGE_VIM_RUNTIME=y" >> buildroot-external/configs/${{matrix.target}}_defconfig
        echo "BR2_PACKAGE_NANO=y" >> buildroot-external/configs/${{matrix.target}}_defconfig
        echo "BR2_PACKAGE_NANO_TINY=y" >> buildroot-external/configs/${{matrix.target}}_defconfig
        echo "BR2_PACKAGE_NTP=y" >> buildroot-external/configs/${{matrix.target}}_defconfig
        echo "BR2_PACKAGE_NTP_SNTP=y" >> buildroot-external/configs/${{matrix.target}}_defconfig
        echo "BR2_PACKAGE_NTPDATE=y" >> buildroot-external/configs/${{matrix.target}}_defconfig
        echo "BR2_PACKAGE_NTPTIME=y" >> buildroot-external/configs/${{matrix.target}}_defconfig
        echo "BR2_PACKAGE_TZDATA=y" >> buildroot-external/configs/${{matrix.target}}_defconfig
        echo "BR2_PACKAGE_HTOP=y" >> buildroot-external/configs/${{matrix.target}}_defconfig
        echo "BR2_PACKAGE_WGET=y" >> buildroot-external/configs/${{matrix.target}}_defconfig
        #echo "BR2_PACKAGE_OPKG=y" >> buildroot-external/configs/${{matrix.target}}_defconfig
        #echo "BR2_PACKAGE_OPKG_GPG_SIGN=y" >> buildroot-external/configs/${{matrix.target}}_defconfig
        echo "BR2_TARGET_INFO=y" >> buildroot-external/configs/${{matrix.target}}_defconfig
        #echo "BR2_TARGET_ROOTFS_EXT2=y" >> buildroot-external/configs/${{matrix.target}}_defconfig
        #echo "BR2_TARGET_ROOTFS_EXT2_4=y" >> buildroot-external/configs/${{matrix.target}}_defconfig
        #echo "BR2_TARGET_ROOTFS_EXT2_SIZE=\"128M\"" >> buildroot-external/configs/${{matrix.target}}_defconfig
        #echo "BR2_PACKAGE_HOST_E2FSPROGS=y" >> buildroot-external/configs/${{matrix.target}}_defconfig
        echo "BR2_PACKAGE_HOST_ZIP=y" >> buildroot-external/configs/${{matrix.target}}_defconfig
        #echo "BR2_PACKAGE_HOST_PARTED=y" >> buildroot-external/configs/${{matrix.target}}_defconfig
        echo "BR2_TARGET_ZONELIST=\"default\"" >> buildroot-external/configs/${{matrix.target}}_defconfig
        echo "BR2_TARGET_LOCALTIME=\"Asia/Shanghai\"" >> buildroot-external/configs/${{matrix.target}}_defconfig
    - name: SSH connection to Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
    - name: 'Add release PKI certs'
      env:
          RAUC_CERTIFICATE: ${{ secrets.RAUC_CERTIFICATE }}
          RAUC_PRIVATE_KEY: ${{ secrets.RAUC_PRIVATE_KEY }}
      run: |
          echo -e "-----BEGIN CERTIFICATE-----\n${RAUC_CERTIFICATE}\n-----END CERTIFICATE-----" > cert.pem
          echo -e "-----BEGIN PRIVATE KEY-----\n${RAUC_PRIVATE_KEY}\n-----END PRIVATE KEY-----" > key.pem
          echo -e "-----BEGIN CERTIFICATE-----\n${RAUC_CA}\n-----END CERTIFICATE-----\n" > ca.pem
          echo -e "-----BEGIN CERTIFICATE-----\n${RAUC_CA1}\n-----END CERTIFICATE-----" >> ca.pem
          echo $${RAUC_CA}
          ls -l
          echo ${GITHUB_WORKSPACE}
          cd ${GITHUB_WORKSPACE}
          ls -l          
    - name: Build
      shell: 'script -q -e -c "bash {0}"'
      id: build
      run: |
        sleep $((RANDOM % 60))    
        cd ${GITHUB_WORKSPACE}
        ./scripts/enter.sh make -j$(($(nproc) + 1)) ${{matrix.target}}
        #sudo ./scripts/entry.sh make ${{matrix.target}}
        cd ${GITHUB_WORKSPACE}/release
        ls -l
    - name: Upload Firmware
      uses: actions/upload-artifact@main
      with:
        name: ${{matrix.target}}_Firmware
        path: ${{ github.workspace }}/release
    
    - name: Delete workflow runs
      uses: GitRML/delete-workflow-runs@main
      with:
        retain_days: 1
        keep_minimum_runs: 1
        token: ${{ secrets.GB_TOKEN }}

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@v0.1.0
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
