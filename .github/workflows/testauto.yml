name: HassOS-AutoBuild

on:
#  release:
#    types: [published]
  #push:
  #  branches:
  #    - main
  #  paths:
  #    - 'start'
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
jobs:
  validate_release:
    name: Validate release
    runs-on: [ "ubuntu-20.04" ]
    outputs:
      version: ${{ steps.version_check.outputs.version }}
      version_dev: ${{ steps.version_check.outputs.version_dev }}
    steps:
      - name: detemine ref
        id: detemine_ref
        run: |
          getver=$(wget -qO- -t1 -T2 "https://api.github.com/repos/home-assistant/operating-system/releases/latest" | grep "tag_name" | head -n 1 | awk -F ":" '{print $2}' | sed 's/\"//g;s/,//g;s/ //g' )
          tag_major=$(echo "${getver}" | cut -d '.' -f 1)
          tag_build=$(echo "${getver}" | cut -d '.' -f 2)
          tag_dev=$(echo "${getver}" | cut -d '.' -f 3)
          tag_rel="rel-"${tag_major}
          echo "tag_major=$tag_major" >> $GITHUB_ENV
          echo "tag_build=$tag_build" >> $GITHUB_ENV
          echo "tag_dev=$tag_dev" >> $GITHUB_ENV
          echo "tag_rel=$tag_rel" >> $GITHUB_ENV
          echo ${tag_major}
          echo ${tag_build}
          echo ${tag_dev}
          echo ${tag_rel}
          iftest=$(echo "${{github.event.inputs.ssh}}" | grep fal)
          if [ "" != "${iftest}" ]; then
            echo "fal"
          fi
      - uses: actions/checkout@v2
        with:
            repository: 'home-assistant/operating-system'
            ref: ${{env.tag_rel}}
      - name: Validate version
        id: version_check
        run: |
          major=$(cat ${GITHUB_WORKSPACE}/buildroot-external/meta | grep VERSION_MAJOR | cut -d'=' -f2)
          build=$(cat ${GITHUB_WORKSPACE}/buildroot-external/meta | grep VERSION_BUILD | cut -d'=' -f2)
          tag_major=${{env.tag_major}}
          tag_build=${{env.tag_build}}
          tag_dev=${{env.tag_dev}}
          if [ "${major}.${build}" != "${tag_major}.${tag_build}" ]; then
            echo "Version number in Buildroot metadata is does not match tag (${major}.${build} vs ${{ github.event.release.tag_name }})."
            exit 1
          fi
          if [ "" != "${tag_dev}" ]; then
            echo "Note: Release build with custom dev part: ${tag_dev}."
            echo "::set-output name=version::${major}.${build}.${tag_dev}"
          else
            echo "::set-output name=version::${major}.${build}"
          fi
          echo "::set-output name=version_dev::${tag_dev}"
          echo "version="${major}"+"${build}"+"${tag_dev}
